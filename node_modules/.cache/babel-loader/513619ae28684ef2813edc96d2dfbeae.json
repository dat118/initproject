{"ast":null,"code":"import { AppConstant, EnvConstant } from \"const\";\n/**\n * Format number\n *\n * @param {number} number - The number to format\n * @param {number} [maximumFractionDigits = 3] -The length of decimal\n * @param {string} [fallbackLabel = AppConstant.NOT_HAVE_VALUE_LABEL] - Default string will returned when number is the empty string\n * @param {object} [localeOption = {}] - To customized method toLocaleString\n * @param {number} [minimumFractionDigits = 0] - The min length of decimal\n *\n * @return {string} The value of format number\n *\n */\n\nexport const formatNumber = function (number) {\n  let maximumFractionDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  let fallbackLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AppConstant.NOT_HAVE_VALUE_LABEL;\n  let localeOption = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let minimumFractionDigits = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  try {\n    if (!number && number !== 0) return fallbackLabel;\n    const num = Number(number);\n    return num.toLocaleString(\"en-US\", {\n      maximumFractionDigits,\n      minimumFractionDigits,\n      ...localeOption\n    });\n  } catch (error) {\n    EnvConstant.IS_DEV && console.log(error);\n    return number;\n  }\n};","map":{"version":3,"names":["AppConstant","EnvConstant","formatNumber","number","maximumFractionDigits","fallbackLabel","NOT_HAVE_VALUE_LABEL","localeOption","minimumFractionDigits","num","Number","toLocaleString","error","IS_DEV","console","log"],"sources":["/Users/nguyendat/Documents/init-project/dds_fe_training/src/utils/format.utils.ts"],"sourcesContent":["import { AppConstant, EnvConstant } from \"const\";\n\n/**\n * Format number\n *\n * @param {number} number - The number to format\n * @param {number} [maximumFractionDigits = 3] -The length of decimal\n * @param {string} [fallbackLabel = AppConstant.NOT_HAVE_VALUE_LABEL] - Default string will returned when number is the empty string\n * @param {object} [localeOption = {}] - To customized method toLocaleString\n * @param {number} [minimumFractionDigits = 0] - The min length of decimal\n *\n * @return {string} The value of format number\n *\n */\nexport const formatNumber = (\n  number: number,\n  maximumFractionDigits = 3,\n  fallbackLabel = AppConstant.NOT_HAVE_VALUE_LABEL,\n  localeOption = {},\n  minimumFractionDigits = 0,\n) => {\n  try {\n    if (!number && number !== 0) return fallbackLabel;\n    const num = Number(number);\n    return num.toLocaleString(\"en-US\", {\n      maximumFractionDigits,\n      minimumFractionDigits,\n      ...localeOption,\n    });\n  } catch (error) {\n    EnvConstant.IS_DEV && console.log(error);\n    return number;\n  }\n};\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,OAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,UAC1BC,MAD0B,EAMvB;EAAA,IAJHC,qBAIG,uEAJqB,CAIrB;EAAA,IAHHC,aAGG,uEAHaL,WAAW,CAACM,oBAGzB;EAAA,IAFHC,YAEG,uEAFY,EAEZ;EAAA,IADHC,qBACG,uEADqB,CACrB;;EACH,IAAI;IACF,IAAI,CAACL,MAAD,IAAWA,MAAM,KAAK,CAA1B,EAA6B,OAAOE,aAAP;IAC7B,MAAMI,GAAG,GAAGC,MAAM,CAACP,MAAD,CAAlB;IACA,OAAOM,GAAG,CAACE,cAAJ,CAAmB,OAAnB,EAA4B;MACjCP,qBADiC;MAEjCI,qBAFiC;MAGjC,GAAGD;IAH8B,CAA5B,CAAP;EAKD,CARD,CAQE,OAAOK,KAAP,EAAc;IACdX,WAAW,CAACY,MAAZ,IAAsBC,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAAtB;IACA,OAAOT,MAAP;EACD;AACF,CAnBM"},"metadata":{},"sourceType":"module"}