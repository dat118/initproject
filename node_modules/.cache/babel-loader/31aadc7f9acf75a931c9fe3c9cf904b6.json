{"ast":null,"code":"import { createActions, createReducer } from \"reduxsauce\";\nimport { REDUX_STATE, requestReducerFunc, failureReducerFunc, successReducerFunc, resetReducerFunc } from \"./redux-structure\";\nimport { AccountClass } from \"models\";\n/* ------------- Types and Action Creators ------------- */\n\nexport const {\n  Types,\n  Creators\n} = createActions({\n  getAccount: [\"data\"],\n  accountSuccess: [\"data\"],\n  accountFailure: [\"error\", \"data\"],\n  accountSet: [\"data\"],\n  accountReset: []\n});\n/* ------------- Initial State ------------- */\n\nexport const INITIAL_STATE = { ...REDUX_STATE,\n  account: new AccountClass({\n    email: \"hieu@gmail.com\",\n    name: \"hieu\"\n  })\n};\n/* ------------- Selector ------------- */\n\nexport const Selector = {\n  // Get Account info\n  getAccountInfo: state => state.accountRedux.account\n};\n/* ------------- Reducers ------------- */\n\nconst request = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  return requestReducerFunc(state);\n};\n\nconst success = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return successReducerFunc(state, action);\n};\n\nconst failure = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return failureReducerFunc(state, action);\n};\n\nconst reset = () => resetReducerFunc(INITIAL_STATE);\n/* ------------- Mapping ------------- */\n\n\nconst HANDLERS = {\n  [Types.GET_ACCOUNT]: request,\n  [Types.ACCOUNT_SUCCESS]: success,\n  [Types.ACCOUNT_FAILURE]: failure,\n  [Types.ACCOUNT_SET]: success,\n  [Types.ACCOUNT_RESET]: reset\n};\n/* ------------- Hookup Reducers To Types ------------- */\n\nexport const reducer = createReducer(INITIAL_STATE, HANDLERS);\nexport default Creators;","map":{"version":3,"names":["createActions","createReducer","REDUX_STATE","requestReducerFunc","failureReducerFunc","successReducerFunc","resetReducerFunc","AccountClass","Types","Creators","getAccount","accountSuccess","accountFailure","accountSet","accountReset","INITIAL_STATE","account","email","name","Selector","getAccountInfo","state","accountRedux","request","success","action","failure","reset","HANDLERS","GET_ACCOUNT","ACCOUNT_SUCCESS","ACCOUNT_FAILURE","ACCOUNT_SET","ACCOUNT_RESET","reducer"],"sources":["/Users/nguyendat/Documents/init-project/dds_fe_training/src/redux-store/account.redux.ts"],"sourcesContent":["import { IAppReduxState } from \"./index\";\nimport { createActions, createReducer } from \"reduxsauce\";\nimport {\n  IReduxStateCommon,\n  REDUX_STATE,\n  requestReducerFunc,\n  failureReducerFunc,\n  successReducerFunc,\n  resetReducerFunc,\n} from \"./redux-structure\";\nimport { AccountClass, IAccountProperties } from \"models\";\n\n/* ------------- Types and Action Creators ------------- */\nexport const { Types, Creators } = createActions({\n  getAccount: [\"data\"],\n\n  accountSuccess: [\"data\"],\n  accountFailure: [\"error\", \"data\"],\n  accountSet: [\"data\"],\n  accountReset: [],\n});\n\n/* ------------- Initial State ------------- */\nexport interface IAccountRedux extends IReduxStateCommon {\n  account: IAccountProperties;\n}\nexport const INITIAL_STATE: IAccountRedux = {\n  ...REDUX_STATE,\n\n  account: new AccountClass({ email: \"hieu@gmail.com\", name: \"hieu\" }),\n};\n\n/* ------------- Selector ------------- */\nexport const Selector = {\n  // Get Account info\n  getAccountInfo: (state: IAppReduxState) => state.accountRedux.account,\n};\n\n/* ------------- Reducers ------------- */\nconst request = (state = INITIAL_STATE) => requestReducerFunc(state);\n\nconst success = (state = INITIAL_STATE, action: object) => successReducerFunc(state, action);\n\nconst failure = (state = INITIAL_STATE, action: object) => failureReducerFunc(state, action);\n\nconst reset = () => resetReducerFunc(INITIAL_STATE);\n\n/* ------------- Mapping ------------- */\nconst HANDLERS = {\n  [Types.GET_ACCOUNT]: request,\n\n  [Types.ACCOUNT_SUCCESS]: success,\n  [Types.ACCOUNT_FAILURE]: failure,\n  [Types.ACCOUNT_SET]: success,\n  [Types.ACCOUNT_RESET]: reset,\n};\n\n/* ------------- Hookup Reducers To Types ------------- */\nexport const reducer = createReducer(INITIAL_STATE, HANDLERS);\n\nexport default Creators;\n"],"mappings":"AACA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,YAA7C;AACA,SAEEC,WAFF,EAGEC,kBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,gBANF,QAOO,mBAPP;AAQA,SAASC,YAAT,QAAiD,QAAjD;AAEA;;AACA,OAAO,MAAM;EAAEC,KAAF;EAASC;AAAT,IAAsBT,aAAa,CAAC;EAC/CU,UAAU,EAAE,CAAC,MAAD,CADmC;EAG/CC,cAAc,EAAE,CAAC,MAAD,CAH+B;EAI/CC,cAAc,EAAE,CAAC,OAAD,EAAU,MAAV,CAJ+B;EAK/CC,UAAU,EAAE,CAAC,MAAD,CALmC;EAM/CC,YAAY,EAAE;AANiC,CAAD,CAAzC;AASP;;AAIA,OAAO,MAAMC,aAA4B,GAAG,EAC1C,GAAGb,WADuC;EAG1Cc,OAAO,EAAE,IAAIT,YAAJ,CAAiB;IAAEU,KAAK,EAAE,gBAAT;IAA2BC,IAAI,EAAE;EAAjC,CAAjB;AAHiC,CAArC;AAMP;;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtB;EACAC,cAAc,EAAGC,KAAD,IAA2BA,KAAK,CAACC,YAAN,CAAmBN;AAFxC,CAAjB;AAKP;;AACA,MAAMO,OAAO,GAAG;EAAA,IAACF,KAAD,uEAASN,aAAT;EAAA,OAA2BZ,kBAAkB,CAACkB,KAAD,CAA7C;AAAA,CAAhB;;AAEA,MAAMG,OAAO,GAAG;EAAA,IAACH,KAAD,uEAASN,aAAT;EAAA,IAAwBU,MAAxB;EAAA,OAA2CpB,kBAAkB,CAACgB,KAAD,EAAQI,MAAR,CAA7D;AAAA,CAAhB;;AAEA,MAAMC,OAAO,GAAG;EAAA,IAACL,KAAD,uEAASN,aAAT;EAAA,IAAwBU,MAAxB;EAAA,OAA2CrB,kBAAkB,CAACiB,KAAD,EAAQI,MAAR,CAA7D;AAAA,CAAhB;;AAEA,MAAME,KAAK,GAAG,MAAMrB,gBAAgB,CAACS,aAAD,CAApC;AAEA;;;AACA,MAAMa,QAAQ,GAAG;EACf,CAACpB,KAAK,CAACqB,WAAP,GAAqBN,OADN;EAGf,CAACf,KAAK,CAACsB,eAAP,GAAyBN,OAHV;EAIf,CAAChB,KAAK,CAACuB,eAAP,GAAyBL,OAJV;EAKf,CAAClB,KAAK,CAACwB,WAAP,GAAqBR,OALN;EAMf,CAAChB,KAAK,CAACyB,aAAP,GAAuBN;AANR,CAAjB;AASA;;AACA,OAAO,MAAMO,OAAO,GAAGjC,aAAa,CAACc,aAAD,EAAgBa,QAAhB,CAA7B;AAEP,eAAenB,QAAf"},"metadata":{},"sourceType":"module"}