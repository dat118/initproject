{"ast":null,"code":"import { EnvConstant } from \"const\";\nimport { legacy_createStore as createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"sagas\";\nimport { Creators as AccountActions, Types as AccountTypes, reducer as AccountReducer, Selector as AccountSelector } from \"./account.redux\";\n/* ------------- Assemble The Reducers ------------- */\n\nconst appReducer = combineReducers({\n  accountRedux: AccountReducer\n}); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action);\n};\n/* ------------- Redux Configuration ------------- */\n\n/* ------------- Saga Middleware ------------- */\n\n\nconst sagaMiddleware = createSagaMiddleware(); // Create store\n\nconst store = EnvConstant.IS_DEV ? createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware))) : createStore(rootReducer, applyMiddleware(sagaMiddleware)); // kick off root saga\n\nsagaMiddleware.run(rootSaga);\n\n/* ------------- Redux Actions ------------- */\nexport { AccountActions, AccountTypes, AccountSelector };\nexport default store;","map":{"version":3,"names":["EnvConstant","legacy_createStore","createStore","applyMiddleware","combineReducers","composeWithDevTools","createSagaMiddleware","rootSaga","Creators","AccountActions","Types","AccountTypes","reducer","AccountReducer","Selector","AccountSelector","appReducer","accountRedux","rootReducer","state","action","sagaMiddleware","store","IS_DEV","run"],"sources":["/Users/nguyendat/Documents/init-project/dds_fe_training/src/redux-store/index.ts"],"sourcesContent":["import { EnvConstant } from \"const\";\nimport { legacy_createStore as createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"sagas\";\n\nimport {\n  Creators as AccountActions,\n  Types as AccountTypes,\n  reducer as AccountReducer,\n  Selector as AccountSelector,\n  IAccountRedux,\n} from \"./account.redux\";\n\n/* ------------- Assemble The Reducers ------------- */\nconst appReducer = combineReducers({\n  accountRedux: AccountReducer,\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst rootReducer = (state: any, action: any) => {\n  return appReducer(state, action);\n};\n\n/* ------------- Redux Configuration ------------- */\n\n/* ------------- Saga Middleware ------------- */\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create store\nconst store = EnvConstant.IS_DEV\n  ? createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)))\n  : createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\n// kick off root saga\nsagaMiddleware.run(rootSaga);\n\ninterface IAppReduxState {\n  accountRedux: IAccountRedux;\n}\n\n/* ------------- Redux Actions ------------- */\nexport { AccountActions, AccountTypes, AccountSelector };\nexport type { IAppReduxState, IAccountRedux };\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,kBAAkB,IAAIC,WAA/B,EAA4CC,eAA5C,EAA6DC,eAA7D,QAAoF,OAApF;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,OAArB;AAEA,SACEC,QAAQ,IAAIC,cADd,EAEEC,KAAK,IAAIC,YAFX,EAGEC,OAAO,IAAIC,cAHb,EAIEC,QAAQ,IAAIC,eAJd,QAMO,iBANP;AAQA;;AACA,MAAMC,UAAU,GAAGZ,eAAe,CAAC;EACjCa,YAAY,EAAEJ;AADmB,CAAD,CAAlC,C,CAIA;;AACA,MAAMK,WAAW,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;EAC/C,OAAOJ,UAAU,CAACG,KAAD,EAAQC,MAAR,CAAjB;AACD,CAFD;AAIA;;AAEA;;;AACA,MAAMC,cAAc,GAAGf,oBAAoB,EAA3C,C,CAEA;;AACA,MAAMgB,KAAK,GAAGtB,WAAW,CAACuB,MAAZ,GACVrB,WAAW,CAACgB,WAAD,EAAcb,mBAAmB,CAACF,eAAe,CAACkB,cAAD,CAAhB,CAAjC,CADD,GAEVnB,WAAW,CAACgB,WAAD,EAAcf,eAAe,CAACkB,cAAD,CAA7B,CAFf,C,CAIA;;AACAA,cAAc,CAACG,GAAf,CAAmBjB,QAAnB;;AAMA;AACA,SAASE,cAAT,EAAyBE,YAAzB,EAAuCI,eAAvC;AAGA,eAAeO,KAAf"},"metadata":{},"sourceType":"module"}