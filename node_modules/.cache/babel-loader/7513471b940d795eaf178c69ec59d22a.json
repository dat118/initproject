{"ast":null,"code":"/**\n * Check if a value is greater than or equal 0\n *\n * @param {number | string} value - Value to check\n *\n * @return {boolean} Return true if value is number >= 0, false otherwise\n */\nexport const isGreaterThanOrEqualZero = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length) {\n    return args.every(value => {\n      const valueAsInt = typeof value === \"string\" ? parseInt(value) : value;\n      return valueAsInt >= 0;\n    });\n  } else {\n    return false;\n  }\n};\n/**\n * Check if a value is not a number\n *\n * @param {number | string} value - Value to check\n *\n * @return {boolean} Return true if value is not a number, false if value is a number\n */\n\nexport const isNotNumber = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return (args || []).filter(value => !isGreaterThanOrEqualZero(value)).length > 0;\n};\n/**\n * Convert snake string into camel string\n *\n * @param  {string} str  - Snake string\n *\n * @returns {string} Camel string\n */\n\nexport const snakeToCamelCase = str => {\n  if (str.includes(\"_\") || str.includes(\"-\")) return str.toLowerCase().replace(/([-_][a-z])/g, group => group.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\"));\n  return str;\n};\n/**\n * Check format password\n *\n * @param {string} password  - password\n *\n * @returns {boolean}  Return true if password is correct format, false remaining case\n */\n\nexport const checkPasswordFormat = password => {\n  const regexPassword = /^[\\x21-\\x7E]*$/;\n  const minCharacter = 8;\n  const maxCharacter = 50;\n  if (password.length && password.length < minCharacter || password.length > maxCharacter || !regexPassword.test(password)) return false;else return true;\n};\n/**\n * Check format email\n *\n * @param {string} email  - email\n *\n * @returns {boolean}  Return true if email is correct format, false remaining case\n */\n\nexport const checkEmailFormat = email => {\n  const regexEmail = /^(([^<>()[\\]\\\\.,;:\\s@\\\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\\\"]+)*)|(\\\\\".+\\\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (email.length && !regexEmail.test(email)) return false;else return true;\n};\n/**\n * remove space\n *\n * @param {string} str - string to remove\n *\n * @return {string} string without space\n *\n */\n\nexport const removeUnnecessarySpace = str => {\n  return (str || \"\").replace(/\\s+/g, \"\").trim();\n};","map":{"version":3,"names":["isGreaterThanOrEqualZero","args","length","every","value","valueAsInt","parseInt","isNotNumber","filter","snakeToCamelCase","str","includes","toLowerCase","replace","group","toUpperCase","checkPasswordFormat","password","regexPassword","minCharacter","maxCharacter","test","checkEmailFormat","email","regexEmail","removeUnnecessarySpace","trim"],"sources":["/Users/nguyendat/Documents/init-project/dds_fe_training/src/utils/common.utils.ts"],"sourcesContent":["/**\n * Check if a value is greater than or equal 0\n *\n * @param {number | string} value - Value to check\n *\n * @return {boolean} Return true if value is number >= 0, false otherwise\n */\nexport const isGreaterThanOrEqualZero = (...args: (number | string)[]): boolean => {\n  if (args.length) {\n    return args.every((value) => {\n      const valueAsInt = typeof value === \"string\" ? parseInt(value) : value;\n      return valueAsInt >= 0;\n    });\n  } else {\n    return false;\n  }\n};\n\n/**\n * Check if a value is not a number\n *\n * @param {number | string} value - Value to check\n *\n * @return {boolean} Return true if value is not a number, false if value is a number\n */\nexport const isNotNumber = (...args: (number | string)[]): boolean => {\n  return (\n    (args || []).filter((value: number | string) => !isGreaterThanOrEqualZero(value)).length > 0\n  );\n};\n\n/**\n * Convert snake string into camel string\n *\n * @param  {string} str  - Snake string\n *\n * @returns {string} Camel string\n */\nexport const snakeToCamelCase = (str: string): string => {\n  if (str.includes(\"_\") || str.includes(\"-\"))\n    return str\n      .toLowerCase()\n      .replace(/([-_][a-z])/g, (group) => group.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\"));\n\n  return str;\n};\n\n/**\n * Check format password\n *\n * @param {string} password  - password\n *\n * @returns {boolean}  Return true if password is correct format, false remaining case\n */\nexport const checkPasswordFormat = (password: string): boolean => {\n  const regexPassword = /^[\\x21-\\x7E]*$/;\n  const minCharacter = 8;\n  const maxCharacter = 50;\n  if (\n    (password.length && password.length < minCharacter) ||\n    password.length > maxCharacter ||\n    !regexPassword.test(password)\n  )\n    return false;\n  else return true;\n};\n\n/**\n * Check format email\n *\n * @param {string} email  - email\n *\n * @returns {boolean}  Return true if email is correct format, false remaining case\n */\nexport const checkEmailFormat = (email: string): boolean => {\n  const regexEmail =\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\\\"]+)*)|(\\\\\".+\\\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (email.length && !regexEmail.test(email)) return false;\n  else return true;\n};\n\n/**\n * remove space\n *\n * @param {string} str - string to remove\n *\n * @return {string} string without space\n *\n */\nexport const removeUnnecessarySpace = (str: string): string => {\n  return (str || \"\").replace(/\\s+/g, \"\").trim();\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,wBAAwB,GAAG,YAA2C;EAAA,kCAAvCC,IAAuC;IAAvCA,IAAuC;EAAA;;EACjF,IAAIA,IAAI,CAACC,MAAT,EAAiB;IACf,OAAOD,IAAI,CAACE,KAAL,CAAYC,KAAD,IAAW;MAC3B,MAAMC,UAAU,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BE,QAAQ,CAACF,KAAD,CAApC,GAA8CA,KAAjE;MACA,OAAOC,UAAU,IAAI,CAArB;IACD,CAHM,CAAP;EAID,CALD,MAKO;IACL,OAAO,KAAP;EACD;AACF,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,WAAW,GAAG,YAA2C;EAAA,mCAAvCN,IAAuC;IAAvCA,IAAuC;EAAA;;EACpE,OACE,CAACA,IAAI,IAAI,EAAT,EAAaO,MAAb,CAAqBJ,KAAD,IAA4B,CAACJ,wBAAwB,CAACI,KAAD,CAAzE,EAAkFF,MAAlF,GAA2F,CAD7F;AAGD,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,gBAAgB,GAAIC,GAAD,IAAyB;EACvD,IAAIA,GAAG,CAACC,QAAJ,CAAa,GAAb,KAAqBD,GAAG,CAACC,QAAJ,CAAa,GAAb,CAAzB,EACE,OAAOD,GAAG,CACPE,WADI,GAEJC,OAFI,CAEI,cAFJ,EAEqBC,KAAD,IAAWA,KAAK,CAACC,WAAN,GAAoBF,OAApB,CAA4B,GAA5B,EAAiC,EAAjC,EAAqCA,OAArC,CAA6C,GAA7C,EAAkD,EAAlD,CAF/B,CAAP;EAIF,OAAOH,GAAP;AACD,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,mBAAmB,GAAIC,QAAD,IAA+B;EAChE,MAAMC,aAAa,GAAG,gBAAtB;EACA,MAAMC,YAAY,GAAG,CAArB;EACA,MAAMC,YAAY,GAAG,EAArB;EACA,IACGH,QAAQ,CAACf,MAAT,IAAmBe,QAAQ,CAACf,MAAT,GAAkBiB,YAAtC,IACAF,QAAQ,CAACf,MAAT,GAAkBkB,YADlB,IAEA,CAACF,aAAa,CAACG,IAAd,CAAmBJ,QAAnB,CAHH,EAKE,OAAO,KAAP,CALF,KAMK,OAAO,IAAP;AACN,CAXM;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,gBAAgB,GAAIC,KAAD,IAA4B;EAC1D,MAAMC,UAAU,GACd,+JADF;EAEA,IAAID,KAAK,CAACrB,MAAN,IAAgB,CAACsB,UAAU,CAACH,IAAX,CAAgBE,KAAhB,CAArB,EAA6C,OAAO,KAAP,CAA7C,KACK,OAAO,IAAP;AACN,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,sBAAsB,GAAIf,GAAD,IAAyB;EAC7D,OAAO,CAACA,GAAG,IAAI,EAAR,EAAYG,OAAZ,CAAoB,MAApB,EAA4B,EAA5B,EAAgCa,IAAhC,EAAP;AACD,CAFM"},"metadata":{},"sourceType":"module"}